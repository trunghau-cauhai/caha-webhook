// api/webhook.js
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const serverless = require("serverless-http");

const app = express();
app.use(bodyParser.json());

// L·∫•y token t·ª´ Vercel Environment Variables
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "caha_verify_token";
const PAGE_TOKEN   = process.env.PAGE_ACCESS_TOKEN || "";

/**
 * GET "/" (tr√™n endpoint /api/webhook)
 * - N·∫øu c√≥ tham s·ªë hub.* => flow VERIFY c·ªßa Facebook
 * - N·∫øu kh√¥ng => tr·∫£ v·ªÅ message ki·ªÉm tra nhanh
 */
app.get("/", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  // Flow VERIFY c·ªßa FB
  if (mode && token) {
    if (mode === "subscribe" && token === VERIFY_TOKEN) {
      console.log("‚úÖ Verified webhook");
      return res.status(200).send(challenge);
    }
    return res.sendStatus(403); // sai verify_token
  }

  // Trang ki·ªÉm tra nhanh khi m·ªü tr√¨nh duy·ªát
  return res.status(200).send("CAHA Webhook is running");
});

/**
 * POST "/" (tr√™n endpoint /api/webhook)
 * - FB s·∫Ω g·ªçi khi c√≥ tin nh·∫Øn / postback
 */
app.post("/", async (req, res) => {
  // B√°o FB l√† ƒë√£ nh·∫≠n (quan tr·ªçng)
  res.status(200).send("EVENT_RECEIVED");

  try {
    if (req.body.object !== "page") return;

    for (const entry of req.body.entry || []) {
      for (const ev of entry.messaging || []) {
        const psid = ev.sender?.id;
        if (!psid) continue;

        if (ev.message?.text) {
          await sendText(psid, `CAHA xin ch√†o üëã Anh/ch·ªã v·ª´a nh·∫Øn: "${ev.message.text}"`);
        } else if (ev.postback?.payload) {
          await sendText(psid, `Anh/ch·ªã v·ª´a b·∫•m: ${ev.postback.payload}`);
        }
      }
    }
  } catch (e) {
    console.error("Handler error:", e?.response?.data || e);
  }
});

// G·ªçi Send API ƒë·ªÉ tr·∫£ l·ªùi kh√°ch
async function sendText(psid, text) {
  if (!PAGE_TOKEN) {
    console.warn("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh PAGE_ACCESS_TOKEN tr√™n Vercel");
    return;
  }
  const url = `https://graph.facebook.com/v23.0/me/messages?access_token=${PAGE_TOKEN}`;
  await axios.post(url, {
    recipient: { id: psid },
    message: { text }
  });
}

// ‚ú® Vercel c·∫ßn export function, KH√îNG d√πng app.listen()
module.exports = app;              // cho dev/local
module.exports.handler = serverless(app); // cho Vercel
